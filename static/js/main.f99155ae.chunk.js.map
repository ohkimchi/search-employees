{"version":3,"sources":["App/AppReducer.ts","Components/Search.tsx","utils/utils.ts","Components/Result.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionType","initialState","currentPage","directSub","employeeName","nonDirectSub","noResult","Context","createContext","Reducer","state","action","type","SET_CURRENT_PAGE","SET_DIRECT_SUB","SET_NON_DIRECT_SUB","SET_EMPLOYEE_NAME","SET_NO_RESULT","useStyles","makeStyles","theme","createStyles","iconButton","padding","input","flex","marginLeft","spacing","root","alignItems","display","margin","width","PAGE_LOGIC","ResultPage","Result","SearchPage","classes","useContext","dispatch","useState","name","setName","showReminder","setShowReminder","className","Paper","component","InputBase","placeholder","inputProps","onChange","e","handleOnChange","target","value","IconButton","aria-label","onClick","a","async","preventDefault","getDirAndUnDirSub","handleOnClick","API","url","fetch","res","status","json","oriUrl","getDirectSub","catch","err","console","log","then","dirSubRes","dirSubObj","getNonDirectSub","subArr","Promise","all","map","p","includes","ds","nonDirSubArr","demo","backgroundColor","palette","background","paper","generate","i","key","useHistory","location","pathname","split","splice","useEffect","length","App","useReducer","Compo","Provider","exact","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f99155ae.chunk.js","sourcesContent":["import { createContext, Dispatch } from 'react'\n\nexport interface IAction {\n  currentPage?: string\n  directSub?: string[]\n  employeeName?: string\n  nonDirectSub?: string[] | []\n  noResult?: boolean\n  type: ActionType\n}\n\nexport enum ActionType {\n  SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\n  SET_DIRECT_SUB = 'SET_DIRECT_SUB',\n  SET_NON_DIRECT_SUB = 'SET_NON_DIRECT_SUB',\n  SET_EMPLOYEE_NAME = 'SET_EMPLOYEE_NAME',\n  SET_NO_RESULT = 'SET_NO_RESULT'\n}\n\nexport const initialState = {\n  currentPage: 'SearchPage',\n  directSub: [''],\n  employeeName: '',\n  nonDirectSub: [],\n  noResult: false\n}\n\ninterface IContextProps {\n  state: typeof initialState\n  dispatch: Dispatch<IAction>\n}\n\nexport const Context = createContext({} as IContextProps)\n\nexport function Reducer(state: any, action: IAction) {\n  switch (action.type) {\n    case ActionType.SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.currentPage\n      }\n    case ActionType.SET_DIRECT_SUB:\n      return {\n        ...state,\n        directSub: action.directSub\n      }\n    case ActionType.SET_NON_DIRECT_SUB:\n      return {\n        ...state,\n        nonDirectSub: action.nonDirectSub\n      }\n    case ActionType.SET_EMPLOYEE_NAME:\n      return {\n        ...state,\n        employeeName: action.employeeName\n      }\n    case ActionType.SET_NO_RESULT:\n      return {\n        ...state,\n        noResult: action.noResult\n      }\n    default:\n      return state\n  }\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputBase from '@material-ui/core/InputBase'\nimport Paper from '@material-ui/core/Paper'\nimport SearchIcon from '@material-ui/icons/Search'\nimport React, { FC, useContext, useState } from 'react'\nimport { ActionType, Context } from '../App/AppReducer'\nimport { getDirAndUnDirSub } from '../utils/utils'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    iconButton: {\n      padding: 10\n    },\n    input: {\n      flex: 1,\n      marginLeft: theme.spacing(1)\n    },\n    root: {\n      alignItems: 'center',\n      display: 'flex',\n      margin: 'auto',\n      padding: '2px 4px',\n      width: 300\n    }\n  })\n)\n\nconst Search: FC = () => {\n  const classes = useStyles()\n  const { state, dispatch } = useContext(Context)\n  const [name, setName] = useState('')\n  const [showReminder, setShowReminder] = useState(false)\n\n  const handleOnChange = (name: string) => {\n    setName(name)\n    if (name !== '') {\n      setShowReminder(false)\n    }\n    dispatch({\n      noResult: false,\n      type: ActionType.SET_NO_RESULT\n    })\n  }\n\n  async function handleOnClick(e: any) {\n    e.preventDefault()\n\n    if (name === '') {\n      setShowReminder(true)\n    } else {\n      await getDirAndUnDirSub(name, dispatch)\n    }\n  }\n\n  return (\n    <div className='search-page'>\n      <h1>Employee Explorer</h1>\n      <Paper component='form' className={classes.root}>\n        <InputBase\n          className={classes.input}\n          placeholder='Search Employee Name'\n          inputProps={{ 'aria-label': 'search employee name' }}\n          onChange={(e) => handleOnChange(e.target.value)}\n        />\n        <IconButton\n          type='submit'\n          className={classes.iconButton}\n          aria-label='search'\n          onClick={(e) => handleOnClick(e)}\n        >\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n      {showReminder && <p>You should key in something then search.</p>}\n      {state.noResult && <p>There is no person called {name}</p>}\n    </div>\n  )\n}\n\nexport default Search\n","import { ActionType } from '../App/AppReducer'\nimport Result from '../Components/Result'\nimport Search from '../Components/Search'\n\ninterface IServie {\n  [pageName: string]: any\n}\n\nexport const PAGE_LOGIC: IServie = {\n  ResultPage: Result,\n  SearchPage: Search\n}\n\nexport async function API(url: string) {\n  let res = await fetch(url)\n  if (res) {\n    if (res.status !== 200) {\n      throw res\n    } else {\n      res = await res.json()\n      return res\n    }\n  }\n}\n\nconst oriUrl = 'https://api.additivasia.io/api/v1/assignment/employees'\n\nexport async function getDirectSub(name: string) {\n  const url = `${oriUrl}/${name}`\n  const dirSubRes = await API(url)\n    // tslint:disable-next-line: no-console\n    .catch((err) => console.log('no result'))\n    .then((res) => res)\n  if (dirSubRes) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [role, dirSubObj] = dirSubRes as any\n    if (dirSubObj && dirSubObj['direct-subordinates']) {\n      return dirSubObj['direct-subordinates']\n    }\n  }\n}\n\nexport async function getNonDirectSub(subArr: string[], res: any) {\n  await Promise.all(\n    subArr.map(async (p) => {\n      if (!res.includes(p)) {\n        const ds = await getDirectSub(p)\n        if (ds) {\n          res = [...res, ...ds]\n          res = await getNonDirectSub(ds, res)\n        }\n      }\n    })\n  )\n  return res\n}\n\nexport async function getDirAndUnDirSub(name: string, dispatch: any) {\n  const subArr = await getDirectSub(name)\n  if (subArr) {\n    const nonDirSubArr = await getNonDirectSub(subArr, [])\n    if (nonDirSubArr !== []) {\n      dispatch({\n        nonDirectSub: nonDirSubArr,\n        type: ActionType.SET_NON_DIRECT_SUB\n      })\n    }\n    dispatch({\n      directSub: subArr,\n      type: ActionType.SET_DIRECT_SUB\n    })\n    dispatch({\n      employeeName: name,\n      type: ActionType.SET_EMPLOYEE_NAME\n    })\n    dispatch({\n      currentPage: 'ResultPage',\n      type: ActionType.SET_CURRENT_PAGE\n    })\n  } else {\n    dispatch({\n      noResult: true,\n      type: ActionType.SET_NO_RESULT\n    })\n  }\n}\n","import { createStyles, makeStyles, Theme } from '@material-ui/core'\nimport React, { FC, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { ActionType, Context } from '../App/AppReducer'\nimport { getDirAndUnDirSub } from '../utils/utils'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    demo: {\n      backgroundColor: theme.palette.background.paper,\n      margin: 'auto',\n      width: '85%'\n    }\n  })\n)\nfunction generate(directSub: string[]) {\n  return directSub.map((name, i) => <p key={`${name}-${i}`}>{name}</p>)\n}\n\nconst Result: FC = () => {\n  const classes = useStyles()\n  const { state, dispatch } = useContext(Context)\n  const history = useHistory()\n  const employeeName = history.location.pathname.split('/').splice(-1)[0]\n\n  useEffect(() => {\n    if (state.employeeName === '' && employeeName !== '') {\n      dispatch({\n        employeeName,\n        type: ActionType.SET_EMPLOYEE_NAME\n      })\n      getDirAndUnDirSub(employeeName, dispatch)\n    }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [employeeName])\n\n  return (\n    <div>\n      <h1>Employee Overview</h1>\n      {state.employeeName !== '' && (\n        <div>\n          <div className={classes.demo}>\n            <p>Subordinates of employee {state.employeeName}: ({state.directSub.length})</p>\n            <div>{generate(state.directSub)}</div>\n          </div>\n          {state.nonDirectSub.length !== 0 && (\n            <div className={classes.demo}>\n<p>Non-direct subordinates of employee {state.employeeName}: ({state.nonDirectSub.length})</p>\n              <div>{generate(state.nonDirectSub)}</div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Result\n","import React, { useReducer } from 'react'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport Result from '../Components/Result'\nimport { PAGE_LOGIC } from '../utils/utils'\nimport './App.css'\nimport { Context, initialState, Reducer } from './AppReducer'\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(Reducer, initialState)\n  const Compo = PAGE_LOGIC[state.currentPage]\n\n  return (\n    <Context.Provider value={{ state, dispatch }}>\n      <div className='App'>\n        <Router>\n          <Route exact path='/' component={Compo}/>\n          <Route path='/overview/:name' component={Result} />\n        </Router>\n      </div>\n    </Context.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App/App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}