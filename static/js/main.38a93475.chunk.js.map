{"version":3,"sources":["App/AppReducer.ts","Components/Result.tsx","Components/Search.tsx","utils/utils.ts","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionType","initialState","currentPage","directSub","employeeName","nonDirectSub","Context","createContext","Reducer","state","action","type","SET_CURRENT_PAGE","SET_DIRECT_SUB","SET_NON_DIRECT_SUB","SET_EMPLOYEE_NAME","useStyles","makeStyles","theme","createStyles","demo","backgroundColor","palette","background","paper","margin","width","generate","map","name","i","key","Result","classes","useContext","history","useHistory","console","log","location","pathname","split","className","length","iconButton","padding","input","flex","marginLeft","spacing","root","alignItems","display","PAGE_LOGIC","ResultPage","SearchPage","dispatch","useState","setName","showReminder","setShowReminder","showNoResult","setNoResult","Paper","component","InputBase","placeholder","inputProps","onChange","e","handleOnChange","target","value","IconButton","aria-label","onClick","a","async","preventDefault","getDirectSub","subArr","getNonDirectSub","nonDirSubArr","handleOnClick","API","url","fetch","res","status","json","oriUrl","catch","err","then","dirSubRes","dirSubObj","Promise","all","p","includes","ds","App","useReducer","Compo","Provider","exact","path","process","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38a93475.chunk.js","sourcesContent":["import { createContext, Dispatch } from 'react'\n\nexport interface IAction {\n  currentPage?: string\n  directSub?: string[]\n  employeeName?: string\n  nonDirectSub?: string[] | []\n  type: ActionType\n}\n\nexport enum ActionType {\n  SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\n  SET_DIRECT_SUB = 'SET_DIRECT_SUB',\n  SET_NON_DIRECT_SUB = 'SET_NON_DIRECT_SUB',\n  SET_EMPLOYEE_NAME = 'SET_EMPLOYEE_NAME'\n}\n\nexport const initialState = {\n  currentPage: 'SearchPage',\n  directSub: [''],\n  employeeName: '',\n  nonDirectSub: []\n}\n\ninterface IContextProps {\n  state: typeof initialState\n  dispatch: Dispatch<IAction>\n}\n\nexport const Context = createContext({} as IContextProps)\n\nexport function Reducer(state: any, action: IAction) {\n  switch (action.type) {\n    case ActionType.SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.currentPage\n      }\n    case ActionType.SET_DIRECT_SUB:\n      return {\n        ...state,\n        directSub: action.directSub\n      }\n    case ActionType.SET_NON_DIRECT_SUB:\n      return {\n        ...state,\n        nonDirectSub: action.nonDirectSub\n      }\n    case ActionType.SET_EMPLOYEE_NAME:\n      return {\n        ...state,\n        employeeName: action.employeeName\n      }\n    default:\n      return state\n  }\n}\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core\"\nimport React, { FC, useContext } from \"react\"\nimport { Context } from \"../App/AppReducer\"\nimport { useHistory } from \"react-router-dom\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    demo: {\n      backgroundColor: theme.palette.background.paper,\n      margin: \"auto\",\n      width: \"85%\"\n    }\n  })\n)\nfunction generate(directSub: string[]) {\n  return directSub.map((name, i) => <p key={`${name}-${i}`}>{name}</p>)\n}\n\nconst Result: FC = () => {\n  const classes = useStyles()\n  const { state } = useContext(Context)\n  let history = useHistory()\n  console.log(history.location.pathname.split('/'))\n\n  return (\n    <div>\n      <h1>Employee Overview</h1>\n      {state.employeeName !== \"\" && (\n        <div>\n          <div className={classes.demo}>\n            <p>Subordinates of employee {state.employeeName}:</p>\n            <div>{generate(state.directSub)}</div>\n          </div>\n          {state.nonDirectSub.length !== 0 && (\n            <div className={classes.demo}>\n              <p>Non-direct subordinates of employee {state.employeeName}:</p>\n              <div>{generate(state.nonDirectSub)}</div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Result\n","import { createStyles, makeStyles, Theme } from '@material-ui/core'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputBase from '@material-ui/core/InputBase'\nimport Paper from '@material-ui/core/Paper'\nimport SearchIcon from '@material-ui/icons/Search'\nimport React, { FC, useContext, useState } from 'react'\nimport { ActionType, Context } from '../App/AppReducer'\nimport { getDirectSub, getNonDirectSub } from '../utils/utils'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    iconButton: {\n      padding: 10\n    },\n    input: {\n      flex: 1,\n      marginLeft: theme.spacing(1)\n    },\n    root: {\n      alignItems: 'center',\n      display: 'flex',\n      margin: 'auto',\n      padding: '2px 4px',\n      width: 300\n    }\n  })\n)\n\nconst Search: FC = () => {\n  const classes = useStyles()\n  const { dispatch } = useContext(Context)\n  const [name, setName] = useState('')\n  const [showReminder, setShowReminder] = useState(false)\n  const [showNoResult, setNoResult] = useState(false)\n\n  const handleOnChange = (name: string) => {\n    setName(name)\n    if (name !== '') {\n      setShowReminder(false)\n    }\n    setNoResult(false)\n  }\n\n  async function handleOnClick(e: any) {\n    e.preventDefault()\n\n    if (name === '') {\n      setShowReminder(true)\n    } else {\n      const subArr = await getDirectSub(name)\n      if (subArr) {\n        const nonDirSubArr = await getNonDirectSub(subArr, [])\n        if (nonDirSubArr !== []) {\n          dispatch({\n            nonDirectSub: nonDirSubArr,\n            type: ActionType.SET_NON_DIRECT_SUB\n          })\n        }\n        dispatch({\n          directSub: subArr,\n          type: ActionType.SET_DIRECT_SUB\n        })\n        dispatch({\n          employeeName: name,\n          type: ActionType.SET_EMPLOYEE_NAME\n        })\n        dispatch({\n          currentPage: 'ResultPage',\n          type: ActionType.SET_CURRENT_PAGE\n        })\n      } else {\n        setNoResult(true)\n      }\n    }\n  }\n\n  return (\n    <div className='search-page'>\n      <h1>Employee Explorer</h1>\n      <Paper component='form' className={classes.root}>\n        <InputBase\n          className={classes.input}\n          placeholder='Search Employee Name'\n          inputProps={{ 'aria-label': 'search employee name' }}\n          onChange={(e) => handleOnChange(e.target.value)}\n        />\n        <IconButton\n          type='submit'\n          className={classes.iconButton}\n          aria-label='search'\n          onClick={(e) => handleOnClick(e)}\n        >\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n      {showReminder && <p>You should key in something then search.</p>}\n      {showNoResult && <p>There is no person called {name}</p>}\n    </div>\n  )\n}\n\nexport default Search\n","import Result from '../Components/Result'\nimport Search from '../Components/Search'\n\ninterface IServie {\n  [pageName: string]: any\n}\n\nexport const PAGE_LOGIC: IServie = {\n  ResultPage: Result,\n  SearchPage: Search\n}\n\nexport async function API(url: string) {\n  let res = await fetch(url)\n  if (res) {\n    if (res.status !== 200) {\n      throw res\n    } else {\n      res = await res.json()\n      return res\n    }\n  }\n}\n\nconst oriUrl = 'https://api.additivasia.io/api/v1/assignment/employees'\n\nexport async function getDirectSub(name: string) {\n  const url = `${oriUrl}/${name}`\n  const dirSubRes = await API(url)\n    // tslint:disable-next-line: no-console\n    .catch(err => console.log('no result'))\n    .then(res => res)\n  if (dirSubRes) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [role, dirSubObj] = dirSubRes as any\n    if (dirSubObj && dirSubObj['direct-subordinates']) {\n      return dirSubObj['direct-subordinates']\n    }\n  }\n}\n\nexport async function getNonDirectSub(subArr: string[], res: any) {\n  await Promise.all(\n    subArr.map(async p => {\n      if (!res.includes(p)) {\n        const ds = await getDirectSub(p)\n        if (ds) {\n          res = [...res, ...ds]\n          res = await getNonDirectSub(ds, res)\n        }\n      }\n    })\n  )\n  return res\n}\n","import React, { useReducer } from \"react\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport Result from \"../Components/Result\"\nimport { PAGE_LOGIC } from \"../utils/utils\"\nimport \"./App.css\"\nimport { Context, initialState, Reducer } from \"./AppReducer\"\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(Reducer, initialState)\n  const Compo = PAGE_LOGIC[state.currentPage]\n\n  return (\n    <Context.Provider value={{ state, dispatch }}>\n      <div className=\"App\">\n        <Router>\n          <Route exact path=\"/\" component={Compo}/>\n          <Route path={`${process.env.PUBLIC_URL}/overview/:name`} component={Result} />\n        </Router>\n      </div>\n    </Context.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App/App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}